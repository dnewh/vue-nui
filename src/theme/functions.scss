/**
 * Theme any css property based on the current palette, accepting a themable
 * value that will give an contrasted
 * ---
 * Usage example:
 *
 * $foo-palette: (
 *   primary: get-palette-color(indigo, 500),
 *   accent: get-palette-color(pink, 500),
 *   theme: "light"
 * );
 *
 * ---
 * @access public
 * ---
 * @param {color} $type —  The desired color based on palette
 * @param {string} $type —  A valid hue
 */

@function get-palette-color($color, $hue) {
    @return map-get(map-get($palette, $color), $hue);
}


/**
* Get the current theme mode from the current theme
* ---
* Usage example:
*
* $theme-mode: get-theme-mode()
*
* ---
* @access private
*/

@function get-theme-mode() {
    @return map-get($theme-palette, theme);
}


/**
* Theme any css property based on the current palette, accepting a themable
* value that will give an contrasted
* ---
* Usage example:
*
* .foo {
*   min-width: 88px;
*   height: 40px;
*   background: theme(primary);
* }
*
* ---
* @access public
* ---
* @param {string} $type —  The themable value
*/

@function theme($type, $background: "") {
    $color-theme: null;

    @if $type == "primary" or $type == "accent" {
        @return get-color-by-type($type, null);
    } @else {
        $color-theme: map-get($theme-palette, theme);

        @if $background != "" {
            $color-theme: pick-contrast(get-color-by-type($background, $color-theme));
        }

        @return get-color-by-theme($color-theme, $type);
    }
}


/**
* Get a color based on type by theme
* ---
* Usage example:
*
* $color: get-color-by-theme(dark, primary)
*
* ---
* @access public
* ---
* @param {string} $color-theme —  The theme color | Accepts dark or light
* @param {string} $type —  The color type
*/

@function get-color-by-theme($color-theme, $type) {
    $theme: map-get($color-levels, $color-theme);

    @return map-get($theme, $type);
}


/**
* Get a color based on type only
* ---
* Usage example:
*
* $color1: get-color-by-type(background, dark)
* $color1: get-color-by-type(accent)
*
* ---
* @access public
* ---
* @param {string} $type —  The color type
* @param {string} $theme —  The fallback theme
*/

@function get-color-by-type($type, $theme) {
    $newColor: map-get($theme-palette, $type);

    @if $newColor == null {
        $newColor: get-color-by-theme($theme, $type);
    }

    @return $newColor
}
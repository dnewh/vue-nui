@import '../base/theme.scss';

/**
 * Override extending the default palette giving new values. It will extend
 * the default values of the palette if has a property missing.
 * ---
 * Usage example:
 *
 * @include override-palette ((
 *   accent: blue,
 *   theme: "dark"
 * ))
 *
 * ---
 * @access public
 * @param {map} $palette —  The new palette
 */

@mixin override-palette ($palette) {
    $default-palette: map-merge($default-palette, $palette) !global;
}


/**
 * Create a new theme based on a given palette. It will extend the default
 * values of the palette if has a property missing.
 * ---
 * Usage example:
 *
 * @include register-theme("alternative", (
 *   primary: #212121,
 *   accent: #CDDC39,
 *   theme: dark
 * ));
 *
 * ---
 * @access public
 * @param {string} $name —  The theme name to be used with the package
 * @param {map} $palette [$default-palette] —  The theme palette
 */

@mixin register-theme ($name, $palette: $default-palette) {
    $palette: map-merge($default-palette, $palette);
    $theme: map-merge($themes, (
        #{$name}: $palette
    ));

    :root {
        @each $type, $value in $palette {
        --theme-#{$name}-#{$type}: #{$value}
        }
    }

    $themes: $theme !global;
    $theme-name: $name !global;

    @include base-theme;
}


/**
 * Theme pieces of a given scss code for all pre registered themes.
 * ---
 * Usage example:
 *
 * .button {
 *   min-width: 88px;
 *   height: 40px;
 *   display: inline-block;
 *   border-radius: 2px;
 *   transition: .3s ease;
 *
 *   @include theme-component() {
 *     background: theme(primary);
 *     color: theme(text-primary);
 *   }
 *
 *   &.accent {
 *     @include theme-component() {
 *       background: theme(accent);
 *       color: theme(text-accent);
 *     };
 *   }
 * }
 */

@mixin theme-component () {
    @each $theme, $palette in $themes {
        $theme-palette: map-merge($theme-palette, $palette) !global;
        $current-theme: $theme !global;

        @if( $theme == $theme-name or $theme-name == 'all' ) {
            &.theme-#{$theme} {
                @content;
            }
        }
    }
}


/**
 * Theme pieces of a given scss code for all pre registered themes based on parent.
 * ---
 * Usage example:
 *
 * .foo {
 *   @include theme-component-relative() {
 *     @include theme-property(background, primary);
 *   }
 * }
 */

@mixin theme-component-relative () {
    @each $theme, $palette in $themes {
        $theme-palette: map-merge($theme-palette, $palette) !global;
        $current-theme: $theme !global;

        @if( $theme == $theme-name or $theme-name == 'all' ) {
            .theme-#{$theme} & {
                @content;
            }
        }
    }
}


/**
 * Theme a single css property
 * ---
 * Usage example:
 *
 * .button {
 *   min-width: 88px;
 *   height: 40px;
 *   display: inline-block;
 *   border-radius: 2px;
 *   transition: .3s ease;
 *
 *   @include theme-component() {
 *     @include theme-property(background, primary);
 *     @include theme-property(color, text-primary, primary);
 *   }
 *
 *   &.accent {
 *     @include theme-component() {
 *       @include theme-property(background, accent);
 *       @include theme-property(color, text-primary, accent);
 *     }
 *   }
 * }
 *
 * ---
 * @access public
 * @param {string} $property —  The css property
 * @param {string} $type —  A palette type
 * @param {string} $background —  The background color to analyse contrast
 * @param {number} $opacity —  The opacity amount
 */

@mixin theme-property ($property, $type, $background: "", $opacity: "") {
    $value: theme($type, $background);
    $variant: null;

    @if $background != "" {
        $variant: -on-#{$background};
    }

    @if $opacity != "" {
        $value: rgba($value, $opacity);
    }

    #{$property}: $value;
    #{$property}: var(--theme-#{$current-theme}-#{$type}#{$variant}, $value);
}

/**
 * Theme a single css property darkening the color by a certain amount
 * ---
 * Usage example:
 *
 * .button {
 *   min-width: 88px;
 *   height: 40px;
 *   display: inline-block;
 *   border-radius: 2px;
 *   transition: .3s ease;
 *
 *   @include theme-component() {
 *     @include theme-property-darken(background, primary, background, 10%);
 *     @include theme-property(color, text-primary, primary);
 *   }
 * }
 *
 * ---
 * @access public
 * @param {string} $property —  The css property
 * @param {string} $type —  A palette type
 * @param {string} $background —  The background color to analyse contrast
 * @param {string} $darken —  The darken amount to apply to the color
 */

@mixin theme-property-darken ($property, $type, $background: "", $darken: "") {
    $value: theme($type, $background);
    $variant: null;

    @if $background != "" {
        $variant: -on-#{$background};
    }

    @if $darken != "" {
        $value: darken($value, $darken);
    }

    #{$property}: $value;
    #{$property}: var(--theme-#{$current-theme}-#{$type}#{$variant}, $value);
}

/**
 * Theme a single css property by
 * ---
 * Usage example:
 *
 * .md-button {
 *   min-width: 88px;
 *   height: 40px;
 *   display: inline-block;
 *   border-radius: 2px;
 *   transition: .3s ease;
 *
 *   @include theme-component() {
 *     @include theme-property-by-hue(background, grey, 100, toolbar, background);
 *     @include theme-property(color, text-primary, background);
 *   }
 * }
 *
 * ---
 * @access public
 * @param {string} $property —  The css property
 * @param {string} $color —  A valid palette color name
 * @param {string} $hue —  The hue amount to get the hex color
 * @param {string} $type —  The type of variable
 * @param {string} $variant —  The type of constrasted variable
 */

@mixin theme-property-by-hue ($property, $color, $hue, $type, $secondary) {
    $hex: get-palette-color($color, $hue);
    $variant: null;

    @if $secondary != "" {
        $variant: -#{$secondary};
    }

    #{$property}: $hex;
    #{$property}: var(--theme-#{$current-theme}-#{$type}#{variant}, $hex);
}